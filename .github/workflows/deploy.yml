name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8'

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check deployment conditions
        id: check
        run: |
          # Check if all required secrets are set
          if [[ -z "${{ secrets.VERCEL_TOKEN }}" ]] || \
             [[ -z "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" ]] || \
             [[ -z "${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" ]]; then
            echo "Missing required secrets"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if last commit is a hotfix
          if git log -1 --pretty=%B | grep -q "hotfix:"; then
            echo "Hotfix detected, proceeding with deployment"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if it's during maintenance window (UTC)
          hour=$(date -u +%H)
          if [[ $hour -ge 2 && $hour -le 6 ]]; then
            echo "Within maintenance window"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "Outside maintenance window, manual approval required"
            echo "should_deploy=manual" >> $GITHUB_OUTPUT
          fi

  manual-approval:
    name: Manual Deployment Approval
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'manual'
    environment: production-approval
    steps:
      - name: Request approval
        run: echo "Waiting for manual approval..."

  database-migration:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, manual-approval]
    if: always() && needs.pre-deploy-checks.outputs.should_deploy != 'false'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Run migrations
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          supabase db push --dry-run
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Verify migration
        run: |
          supabase db diff --use-migra
          echo "Migration completed successfully"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: database-migration
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup deployment environment
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "VERCEL_ENV=preview" >> $GITHUB_ENV
            echo "VERCEL_SCOPE=staging" >> $GITHUB_ENV
          else
            echo "VERCEL_ENV=production" >> $GITHUB_ENV
            echo "VERCEL_SCOPE=production" >> $GITHUB_ENV
          fi
          
      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ env.VERCEL_ENV == 'production' && '--prod' || '' }}
          scope: ${{ env.VERCEL_SCOPE }}
          
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              required_contexts: [],
              auto_merge: false,
              production_environment: ${{ env.VERCEL_ENV == 'production' }}
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment completed successfully'
            });

  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run smoke tests
        run: pnpm run test:smoke
        env:
          DEPLOY_URL: ${{ needs.deploy-production.outputs.url }}
          
      - name: Run Lighthouse on production
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --collect.url=${{ needs.deploy-production.outputs.url }}
          
      - name: Health check
        run: |
          for i in {1..5}; do
            if curl -f ${{ needs.deploy-production.outputs.url }}/api/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1

  notify-team:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-tests]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'production' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: ${{ needs.deploy-production.outputs.url }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Create GitHub release
        if: success() && env.VERCEL_ENV == 'production'
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const tag = `v${date}-${context.sha.substring(0, 7)}`;
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Production Release ${date}`,
              body: 'Automated production deployment',
              draft: false,
              prerelease: false
            });

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-tests]
    if: failure()
    steps:
      - name: Trigger rollback
        run: |
          echo "Deployment failed, initiating rollback..."
          curl -X POST https://api.vercel.com/v1/deployments/${{ needs.deploy-production.outputs.deployment-id }}/rollback \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json"
            
      - name: Notify of rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Production deployment failed and was rolled back",
              attachments: [{
                color: 'danger',
                fields: [{
                  title: 'Environment',
                  value: '${{ github.event.inputs.environment || 'production' }}',
                  short: true
                }, {
                  title: 'Commit',
                  value: '${{ github.sha }}',
                  short: true
                }]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}